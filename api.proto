syntax = "proto3";

import "google/protobuf/empty.proto";
import "resources.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

package api_pb;

option go_package = ".;api_pb";

service ApiService {
    //Returns a subscription for events by query.
    rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {
        option (google.api.http) = {
            get: "/subscribe"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Only supported in WS and gRPC methods"
        };
    }
    //Returns the candidate votes for stopping the network at block.
    rpc Halts (HaltsRequest) returns (HaltsResponse) {
        option (google.api.http) = {
            get: "/halts"
        };
    }
    //Returns genesis file.
    rpc Genesis (google.protobuf.Empty) returns (GenesisResponse) {
        option (google.api.http) = {
            get: "/genesis"
        };
    }
    //Returns current min gas price.
    rpc MinGasPrice (google.protobuf.Empty) returns (MinGasPriceResponse) {
        option (google.api.http) = {
            get: "/min_gas_price"
        };
    }
    //Returns network info
    rpc NetInfo (google.protobuf.Empty) returns (NetInfoResponse) {
        option (google.api.http) = {
            get: "/net_info"
        };
    }
    //Returns node status including pubkey, latest block.
    rpc Status (google.protobuf.Empty) returns (StatusResponse) {
        option (google.api.http) = {
            get: "/status"
        };
    }
    //Returns coins list, balance and transaction count of an address.
    rpc Address (AddressRequest) returns (AddressResponse) {
        option (google.api.http) = {
            get: "/address/{address}"
        };
    }
    //Returns list of addresses.
    rpc Addresses (AddressesRequest) returns (AddressesResponse) {
        option (google.api.http) = {
            get: "/addresses"
        };
    }
    //Returns block data at given height.
    rpc Block (BlockRequest) returns (BlockResponse) {
        option (google.api.http) = {
            get: "/block/{height}"
        };
    }
    //Returns candidateâ€™s info by provided public_key.
    rpc Candidate (CandidateRequest) returns (CandidateResponse) {
        option (google.api.http) = {
            get: "/candidate/{public_key}"
        };
    }
    //Returns list of candidates.
    rpc Candidates (CandidatesRequest) returns (CandidatesResponse) {
        option (google.api.http) = {
            get: "/candidates"
        };
    }
    //Returns information about coin ID.
    rpc CoinInfoById (CoinIdRequest) returns (CoinInfoResponse) {
        option (google.api.http) = {
            get: "/coin_info_by_id/{id}"
        };
    }
    //Returns information about coin symbol.
    rpc CoinInfo (CoinInfoRequest) returns (CoinInfoResponse) {
        option (google.api.http) = {
            get: "/coin_info/{symbol}"
        };
    }
    //Return estimate of buy coin transaction.
    rpc EstimateCoinBuy (EstimateCoinBuyRequest) returns (EstimateCoinBuyResponse) {
        option (google.api.http) = {
            get: "/estimate_coin_buy"
        };
    }
    //Return estimate of sell coin transaction.
    rpc EstimateCoinSell (EstimateCoinSellRequest) returns (EstimateCoinSellResponse) {
        option (google.api.http) = {
            get: "/estimate_coin_sell"
        };
    }
    //Return estimate of sell all coin transaction.
    rpc EstimateCoinSellAll (EstimateCoinSellAllRequest) returns (EstimateCoinSellAllResponse) {
        option (google.api.http) = {
            get: "/estimate_coin_sell_all"
        };
    }
    //Return estimate of transaction.
    rpc EstimateTxCommission (EstimateTxCommissionRequest) returns (EstimateTxCommissionResponse) {
        option (google.api.http) = {
            get: "/estimate_tx_commission/{tx}"
        };
    }
    //Returns events at given height.
    rpc Events (EventsRequest) returns (EventsResponse) {
        option (google.api.http) = {
            get: "/events/{height}"
        };
    }
    //Returns current max gas.
    rpc MaxGasPrice (MaxGasPriceRequest) returns (MaxGasPriceResponse) {
        option (google.api.http) = {
            get: "/max_gas_price"
        };
    }
    //Returns missed blocks by validator public key.
    rpc MissedBlocks (MissedBlocksRequest) returns (MissedBlocksResponse) {
        option (google.api.http) = {
            get: "/missed_blocks/{public_key}"
        };
    }
    //Returns the result of sending signed tx.
    //
    //To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.
    //
    rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse) {
        option (google.api.http) = {
            get: "/send_transaction/{tx}"
            additional_bindings {
                post: "/send_transaction"
                body: "*"
            }
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            external_docs: {
                url: "https://www.minter.network/docs#transactions"
                description: "More about Minter transactions"
            }
        };
    }
    //Returns transaction info.
    rpc Transaction (TransactionRequest) returns (TransactionResponse) {
        option (google.api.http) = {
            get: "/transaction/{hash}"
        };
    }
    //Return transactions by query.
    rpc Transactions (TransactionsRequest) returns (TransactionsResponse) {
        option (google.api.http) = {
            get: "/transactions"
        };
    }
    //Returns unconfirmed transactions.
    rpc UnconfirmedTxs (UnconfirmedTxsRequest) returns (UnconfirmedTxsResponse) {
        option (google.api.http) = {
            get: "/unconfirmed_txs"
        };
    }
    //Returns list of active validators.
    rpc Validators (ValidatorsRequest) returns (ValidatorsResponse) {
        option (google.api.http) = {
            get: "/validators"
        };
    }
    //Returns frozen balance.
    rpc Frozen (FrozenRequest) returns (FrozenResponse) {
        option (google.api.http) = {
            get: "/frozen/{address}"
        };
    }
    //Returns the list of address stakes in waitlist.
    rpc WaitList (WaitListRequest) returns (WaitListResponse) {
        option (google.api.http) = {
            get: "/waitlist/{public_key}/{address}"
        };
    }
}
