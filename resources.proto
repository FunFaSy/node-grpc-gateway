syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";

package api_pb;

option go_package = ".;api_pb";

message Coin {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example_string: "{\"id\": \"0\", \"symbol\": \"BIP\"}"
    };
    uint64 id = 1;
    string symbol = 2;
}

message NodeInfo {
    message ProtocolVersion {
        uint64 p2p = 3;
        uint64 block = 1;
        uint64 app = 2;
    }
    ProtocolVersion protocol_version = 8;
    string id = 1;
    string listen_addr = 2;
    string network = 3;
    string version = 4;
    string channels = 5;
    string moniker = 6;
    message Other {
        string tx_index = 2;
        string rpc_address = 1;
    }
    Other other = 7;
}
message NetInfoResponse {
    bool listening = 4;
    repeated string listeners = 1;
    int64 count_peers = 2;
    message Peer {
        // Unknown while client is in fast_syncing mode
        google.protobuf.UInt64Value latest_block_height = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
            type: INTEGER
        }];
        NodeInfo node_info = 4;
        bool is_outbound = 1;
        message ConnectionStatus {
            uint64 duration = 4;
            message Monitor {
                bool active = 13;
                string start = 1;
                int64 duration = 2;
                int64 idle = 3;
                int64 bytes = 4;
                int64 samples = 5;
                int64 inst_rate = 6;
                int64 cur_rate = 7;
                int64 avg_rate = 8;
                int64 peak_rate = 9;
                int64 bytes_rem = 10;
                int64 time_rem = 11;
                uint64 progress = 12;
            }
            Monitor SendMonitor = 1;
            Monitor RecvMonitor = 2;
            message Channel {
                int64 id = 5;
                int64 send_queue_capacity = 1;
                int64 send_queue_size = 2;
                int64 priority = 3;
                int64 recently_sent = 4;
            }
            repeated Channel channels = 3;
        }
        ConnectionStatus connection_status = 2;
        string remote_ip = 3;
    }
    repeated Peer peers = 3;
}

message StatusResponse {
    string version = 8;
    string network = 11;
    string latest_block_hash = 1;
    string latest_app_hash = 2;
    uint64 latest_block_height = 3;
    string latest_block_time = 4;
    uint64 keep_last_states = 5;
    string total_slashed = 10;
    bool catching_up = 6;
    string public_key = 7;
    string node_id = 9;
}
message GenesisResponse {
    string genesis_time = 1;
    string chain_id = 2;
    message ConsensusParams {
        message Block {
            int64 max_bytes = 1;
            int64 max_gas = 2;
            int64 time_iota_ms = 3;
        }
        Block block = 1;
        message Evidence {
            int64 max_age_num_blocks = 1;
            int64 max_age_duration = 2;
        }
        Evidence evidence = 2;
        message Validator {
            repeated string pub_key_types = 1;
        }
        Validator validator = 3;
    }
    ConsensusParams consensus_params = 3;
    string app_hash = 4;
    message AppState {
        string note = 10;
        uint64 start_height = 1;

        message Validators {
            string total_bip_stake = 4;
            string public_key = 1;
            string accum_reward = 2;
            string absent_times = 3;
        }
        repeated Validators validators = 2;

        message Candidate {
            uint64 id = 10;
            string reward_address = 1;
            string owner_address = 2;
            string control_address = 3;
            string total_bip_stake = 4;
            string public_key = 5;
            uint64 commission = 6;

            message Stake {
                string owner = 4;
                uint64 coin = 1;
                string value = 2;
                string bip_value = 3;
            }
            repeated Stake stakes = 7;
            repeated Stake updates = 8;
            int64 status = 9;
        }

        repeated Candidate candidates = 3;

        message Coin {
            uint64 id = 9;
            string name = 1;
            string symbol = 2;
            string volume = 3;
            uint64 crr = 4;
            string reserve = 5;
            string max_supply = 6;
            uint64 version = 7;
            string owner_address = 8;
        }
        repeated Coin coins = 5;

        message FrozenFund {
            uint64 height = 5;
            string address = 1;
            string candidate_key = 2;
            uint64 coin = 3;
            string value = 4;
        }
        repeated FrozenFund frozen_funds = 6;

        message Waitlist {
            uint64 candidate_id = 1;
            string owner = 2;
            uint64 coin = 3;
            string value = 4;
        }
        repeated Waitlist waitlist = 13;

        message Account {
            string address = 1;
            message Balance {
                uint64 coin = 1;
                string value = 2;
            }
            repeated Balance balance = 2;
            uint64 nonce = 3;
            message MultisigData {
                uint64 threshold = 1;
                repeated uint64 weights = 2;
                repeated string addresses = 3;
            }
            MultisigData multisig_data = 4;
        }
        repeated Account accounts = 14;

        message HaltBlock {
            uint64 height = 1;
            string candidate_key = 2;
        }
        repeated HaltBlock halt_blocks = 12;

        repeated string used_checks = 11;
        uint64 max_gas = 7;
        string total_slashed = 8;
    }
    AppState app_state = 5;
}

message MinGasPriceResponse {
    uint64 min_gas_price = 3;
}

message BlockRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    enum Field {
        transactions = 0;
        missed = 1;
        block_reward = 2;
        size = 3;
        proposer = 4;
        validators = 5;
        evidence = 6;
    }
    repeated Field fields = 2;
}
message BlockResponse {
    string hash = 1;
    uint64 height = 2;
    string time = 3;
    uint64 transaction_count = 4;

    message Transaction {
        string hash = 1;
        string raw_tx = 2;
        string from = 3;
        uint64 nonce = 4;
        uint64 gas_price = 5;
        uint64 type = 6;
        google.protobuf.Any data = 7;
        bytes payload = 8;
        bytes service_data = 9;
        uint64 gas = 10;
        Coin gas_coin = 11;
        map<string, string> tags = 12;
        uint64 code = 13;
        string log = 14;
    }

    repeated Transaction transactions = 6;
    string block_reward = 7;
    uint64 size = 8;
    string proposer = 9;
    message Validator {
        string public_key = 1;
        bool signed = 2;
    }
    repeated Validator validators = 10;
    message Evidence {
        message Evidence {
            uint64 height = 1;
            string time = 2;
            string address = 3;
            string hash = 4;
        }
        repeated Evidence evidence = 1;
    }
    Evidence evidence = 11;
    repeated string missed = 12;
}

message MaxGasPriceRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message MaxGasPriceResponse {
    uint64 max_gas_price = 3;
}

message AddressRequest {
    string address = 1;
    uint64 height = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    bool delegated = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        default: "false"
    }];
}
message AddressBalance {
    Coin coin = 1;
    string value = 2;
    string bip_value = 3;
}
message AddressDelegatedBalance {
    Coin coin = 1;
    string value = 2;
    string bip_value = 3;
    string delegate_bip_value = 4;
}
message AddressResponse {
    repeated AddressBalance balance = 1;
    repeated AddressDelegatedBalance delegated = 3;
    repeated AddressBalance total = 4;
    uint64 transaction_count = 2;
    string bip_value = 5;
}

message AddressesRequest {
    repeated string addresses = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required: 'addresses'
    }];
    uint64 height = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    bool delegated = 4;
}
message AddressesResponse {
    message Result {
        repeated AddressBalance balance = 2;
        // Filled in when requesting delegator steaks
        repeated AddressDelegatedBalance delegated = 6;
        // Sum of balance and delegated by coins.
        repeated AddressBalance total = 4;
        uint64 transaction_count = 3;
        string bip_value = 5;
    }
    map<string, Result> addresses = 3;
}

message CandidateRequest {
    string public_key = 1;
    uint64 height = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message CandidateResponse {
    string reward_address = 1;
    string owner_address = 10;
    string control_address = 11;
    string total_stake = 2;
    string public_key = 3;
    uint64 commission = 4;
    // To be completed when requesting candidate steaks
    google.protobuf.UInt64Value used_slots = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    // To be completed when requesting candidate steaks
    google.protobuf.UInt64Value uniq_users = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    // To be completed when requesting candidate steaks
    google.protobuf.StringValue min_stake = 9;
    message Stake {
        string owner = 1;
        Coin coin = 2;
        string value = 3;
        string bip_value = 4;
    }
    // To be completed when requesting candidate steaks
    repeated Stake stakes = 5;
    uint64 status = 6;
}

message CandidatesRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    bool include_stakes = 2;
    enum CandidateStatus {
        all = 0;
        off = 1;
        on = 2;
    }
    CandidateStatus status = 3;
}
message CandidatesResponse {
    repeated CandidateResponse candidates = 3;
}

message CoinIdRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example_string: "{\"id\":\"0\"}"
    };
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    uint64 id = 2;
}
message CoinInfoRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    string symbol = 2;
}
message CoinInfoResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example_string: "{\"id\":\"0\",\"name\":\"\",\"symbol\":\"BIP\",\"volume\":\"0\",\"crr\":\"0\",\"reserve_balance\":\"0\",\"max_supply\":\"10000000000000000000000000000\",\"owner_address\":null}"
    };
    uint64 id = 6;
    string name = 1;
    string symbol = 2;
    string volume = 3;
    uint64 crr = 4;
    string reserve_balance = 5;
    string max_supply = 8;
    google.protobuf.StringValue owner_address = 7;
}

message SendTransactionResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example_string: "{\"code\":\"0\",\"log\":\"\", \"hash\":\"Mt6019f740983dc43b53ea9c37891af0c9ce7251399ebaafc4ea56d68d665adfcb\"}"
    };
    uint64 code = 1;
    string log = 3;
    string hash = 4;
}
message SendTransactionRequest {
    string tx = 1;
}

message TransactionResponse {
    string hash = 1;
    string raw_tx = 2;
    uint64 height = 3;
    uint64 index = 4;
    string from = 5;
    uint64 nonce = 6;
    uint64 gas = 7;
    uint64 gas_price = 8;
    Coin gas_coin = 9;
    uint64 type = 10;
    google.protobuf.Any data = 11;
    bytes payload = 12;
    map<string, string> tags = 13;
    uint64 code = 14;
    string log = 15;
}
message TransactionRequest {
    string hash = 1;
}

message TransactionsResponse {
    repeated TransactionResponse transactions = 3;
}
message TransactionsRequest {
    string query = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required: 'query'
    }];
    int32 page = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
        default: '1'
    }];
    int32 per_page = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        default: '30'
    }];
}

message EstimateCoinBuyRequest {
    oneof buy {
        uint64 coin_id_to_buy = 1;
        string coin_to_buy = 5;
    }
    oneof sell {
        uint64 coin_id_to_sell = 2;
        string coin_to_sell = 6;
    }
    string value_to_buy = 3;
    uint64 height = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message EstimateCoinBuyResponse {
    string will_pay = 1;
    string commission = 2;
}

message EstimateCoinSellRequest {
    oneof buy {
        uint64 coin_id_to_buy = 1;
        string coin_to_buy = 5;
    }
    oneof sell {
        uint64 coin_id_to_sell = 2;
        string coin_to_sell = 6;
    }
    string value_to_sell = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required: 'value_to_sell'
    }];
    uint64 height = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message EstimateCoinSellResponse {
    string will_get = 1;
    string commission = 2;
}


message EstimateCoinSellAllRequest {
    oneof buy {
        uint64 coin_id_to_buy = 1;
        string coin_to_buy = 7;
    }
    oneof sell {
        uint64 coin_id_to_sell = 2;
        string coin_to_sell = 6;
    }
    string value_to_sell = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required: 'value_to_sell'
    }];
    uint64 gas_price = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
        default: '1'
    }];
    uint64 height = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message EstimateCoinSellAllResponse {
    string will_get = 1;
}

message EstimateTxCommissionResponse {
    string commission = 1;
}
message EstimateTxCommissionRequest {
    string tx = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required: 'tx'
    }];
    uint64 height = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}

message EventsRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
    repeated string search = 2;
}
message EventsResponse {
    message Event {
        string type = 1;
        google.protobuf.Struct value = 2;
    }
    repeated Event events = 1;
}

message MissedBlocksRequest {
    string public_key = 1;
    uint64 height = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message MissedBlocksResponse {
    string missed_blocks = 1;
    int64 missed_blocks_count = 2;
}

message UnconfirmedTxsResponse {
    uint64 transaction_count = 1;
    uint64 total_transactions = 2;
    uint64 total_bytes = 3;
    repeated string transactions = 4;
}
message UnconfirmedTxsRequest {
    int32 limit = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        default: '30'
        required: 'limit'
    }];
}

message ValidatorsRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message ValidatorsResponse {
    message Result {
        string public_key = 1;
        uint64 voting_power = 2;
    }
    repeated Result validators = 3;
}

message SubscribeRequest {
    string query = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        description: "tm.event = 'NewBlock' or tm.event = 'Tx'"
        required: 'query'
    }];
}
message SubscribeResponse {
    string query = 1;
    google.protobuf.Struct data = 2;
    message Event {
        string key = 1;
        repeated string events = 2;
    }
    repeated Event events = 3;
}

message HaltsRequest {
    uint64 height = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message HaltsResponse {
    repeated string public_keys = 1;
}

message FrozenRequest {
    string address = 1;
    google.protobuf.UInt64Value coin_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        type: INTEGER
    }];
}
message FrozenResponse {
    message Frozen {
        uint64 height = 1;
        string address = 2;
        string candidate_key = 3;
        Coin coin = 4;
        string value = 5;
    }
    repeated Frozen frozen = 1;
}

message WaitListRequest {
    string public_key = 1;
    string address = 2;
    uint64 height = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
         type: INTEGER
    }];
}
message WaitListResponse {
    message Wait {
        string public_key = 3;
        Coin coin = 1;
        string value = 2;
    }
    repeated Wait list = 1;
}

message SendData {
    Coin coin = 1;
    string to = 2;
    string value = 3;
}

message SellCoinData {
    Coin coin_to_sell = 1;
    string value_to_sell = 2;
    Coin coin_to_buy = 3;
    string minimum_value_to_buy = 4;
}

message SellAllCoinData {
    Coin coin_to_sell = 1;
    Coin coin_to_buy = 2;
    string minimum_value_to_buy = 3;
}

message BuyCoinData {
    Coin coin_to_buy = 1;
    string value_to_buy = 2;
    Coin coin_to_sell = 3;
    string maximum_value_to_sell = 4;
}

message CreateCoinData {
    string name = 1;
    string symbol = 2;
    string initial_amount = 3;
    string initial_reserve = 4;
    uint64 constant_reserve_ratio = 5;
    string max_supply = 6;
}

message DeclareCandidacyData {
    string address = 1;
    string pub_key = 2;
    uint64 commission = 3;
    Coin coin = 4;
    string stake = 5;
}

message DelegateData {
    string pub_key = 1;
    Coin coin = 2;
    string value = 3;
}

message UnbondData {
    string pub_key = 1;
    Coin coin = 2;
    string value = 3;
}

message RedeemCheckData {
    string raw_check = 1;
    string proof = 2;
}

message SetCandidateOnData {
    string pub_key = 1;
}

message SetCandidateOffData {
    string pub_key = 1;
}

message CreateMultisigData {
    uint64 threshold = 1;
    repeated uint64 weights = 2;
    repeated string addresses = 3;
}

message MultiSendData {
    repeated SendData list = 1;
}

message EditCandidateData {
    string pub_key = 1;
    string reward_address = 3;
    string owner_address = 4;
    string control_address = 5;
}

message SetHaltBlockData {
    string pub_key = 1;
    uint64 height = 2;
}

message RecreateCoinData {
    string name = 1;
    string symbol = 2;
    string initial_amount = 3;
    string initial_reserve = 4;
    uint64 constant_reserve_ratio = 5;
    string max_supply = 6;
}

message EditCoinOwnerData {
    string symbol = 1;
    string new_owner = 2;
}

message EditMultisigData {
    uint64 threshold = 1;
    repeated uint64 weights = 2;
    repeated string addresses = 3;
}

message PriceVoteData {
    string price = 1;
}

message EditCandidatePublicKeyData {
    string pub_key = 1;
    string new_pub_key = 2;
}