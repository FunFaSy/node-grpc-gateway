{
  "swagger": "2.0",
  "info": {
    "title": "Minter Node API v2",
    "version": "1.2",
    "contact": {
      "name": "Minter gRPC-Gateway",
      "url": "https://github.com/MinterTeam/node-grpc-gateway",
      "email": "sk@minter.org"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/MinterTeam/minter-go-node/blob/master/LICENSE"
    }
  },
  "basePath": "/v2",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/address/{address}": {
      "get": {
        "summary": "Returns coins list, balance and transaction count of an address.",
        "operationId": "Address",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "delegated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          },
          {
            "name": "bip_value",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/addresses": {
      "get": {
        "summary": "Returns list of addresses.",
        "operationId": "Addresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbAddressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "addresses",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "delegated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          },
          {
            "name": "bip_value",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/block/{height}": {
      "get": {
        "summary": "Returns block data at given height.",
        "operationId": "Block",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbBlockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "transactions",
                "missed",
                "block_reward",
                "size",
                "proposer",
                "validators",
                "evidence"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/candidate/{public_key}": {
      "get": {
        "summary": "Candidate",
        "description": "Candidate returns candidate’s info by provided public key.\n\n## Fields of response\n| Name      | Description                  |\n| --------- | ---------------------------- | \n| reward_address | Address where validator’s rewards go to. | \n| owner_address | Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction. It also enables the owner to edit the node by sending EditCandidate. | \n| control_address | Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction. | \n| total_stake | Total stake of a candidate | \n| public_key | Public key of a candidate | \n| commission | Commission (from 0 to 100) from rewards which delegators will pay to validator | \n| used_slots | Number of occupied steak slots. Note: filled in when request includes_stakes | \n| uniq_users | Number of unique wallets in steaks. Note: filled in when request includes_stakes | \n| min_stake | Smallest steak size. Note: filled in when request includes_stakes | \n| stakes | List of stakes. Note: filled in when request includes_stakes | \n| status | Candidate status. Available values: offline = 1, online = 2, validator = 3 |",
        "operationId": "Candidate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbCandidateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "public_key",
            "description": "Public key of a candidate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "description": "Blockchain state height for the current request. Optional, the last default state of the node is used.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/candidates": {
      "get": {
        "summary": "Returns list of candidates.",
        "operationId": "Candidates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbCandidatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "include_stakes",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "all",
              "off",
              "on"
            ],
            "default": "all"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/coin_info/{symbol}": {
      "get": {
        "summary": "Returns information about coin symbol.",
        "operationId": "CoinInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbCoinInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/coin_info_by_id/{id}": {
      "get": {
        "summary": "Returns information about coin ID.",
        "operationId": "CoinInfoById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbCoinInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/estimate_coin_buy": {
      "get": {
        "summary": "Return estimate of buy coin transaction.",
        "operationId": "EstimateCoinBuy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbEstimateCoinBuyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "coin_id_to_buy",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "coin_to_buy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "coin_id_to_sell",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "coin_to_sell",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value_to_buy",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/estimate_coin_sell": {
      "get": {
        "summary": "Return estimate of sell coin transaction.",
        "operationId": "EstimateCoinSell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbEstimateCoinSellResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "coin_id_to_buy",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "coin_to_buy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "coin_id_to_sell",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "coin_to_sell",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value_to_sell",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/estimate_coin_sell_all": {
      "get": {
        "summary": "Return estimate of sell all coin transaction.",
        "operationId": "EstimateCoinSellAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbEstimateCoinSellAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "coin_id_to_buy",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "coin_to_buy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "coin_id_to_sell",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "coin_to_sell",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value_to_sell",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "gas_price",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64",
            "default": "1"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/estimate_tx_commission/{tx}": {
      "get": {
        "summary": "Return estimate of transaction.",
        "operationId": "EstimateTxCommission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbEstimateTxCommissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tx",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/events/{height}": {
      "get": {
        "summary": "Returns events at given height.",
        "operationId": "Events",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/frozen/{address}": {
      "get": {
        "summary": "Returns frozen balance.",
        "operationId": "Frozen",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbFrozenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "coin_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/genesis": {
      "get": {
        "summary": "Returns genesis file.",
        "operationId": "Genesis",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbGenesisResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ApiService"
        ]
      }
    },
    "/halts/{height}": {
      "get": {
        "summary": "Returns the candidate votes for stopping the network at block.",
        "operationId": "Halts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbHaltsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/max_gas_price": {
      "get": {
        "summary": "Returns current max gas.",
        "operationId": "MaxGasPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbMaxGasPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/min_gas_price": {
      "get": {
        "summary": "Returns current min gas price.",
        "operationId": "MinGasPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbMinGasPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ApiService"
        ]
      }
    },
    "/missed_blocks/{public_key}": {
      "get": {
        "summary": "Returns missed blocks by validator public key.",
        "operationId": "MissedBlocks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbMissedBlocksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "public_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/net_info": {
      "get": {
        "summary": "Returns network info",
        "operationId": "NetInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbNetInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ApiService"
        ]
      }
    },
    "/send_transaction": {
      "post": {
        "summary": "Returns the result of sending signed tx.",
        "description": "To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.",
        "operationId": "SendTransaction2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbSendTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_pbSendTransactionRequest"
            }
          }
        ],
        "tags": [
          "ApiService"
        ],
        "externalDocs": {
          "description": "More about Minter transactions",
          "url": "https://www.minter.network/docs#transactions"
        }
      }
    },
    "/send_transaction/{tx}": {
      "get": {
        "summary": "Returns the result of sending signed tx.",
        "description": "To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.",
        "operationId": "SendTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbSendTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tx",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApiService"
        ],
        "externalDocs": {
          "description": "More about Minter transactions",
          "url": "https://www.minter.network/docs#transactions"
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Returns node status including pubkey, latest block.",
        "operationId": "Status",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ApiService"
        ]
      }
    },
    "/subscribe": {
      "get": {
        "summary": "Returns a subscription for events by query. Only supported in WS and gRPC methods.",
        "operationId": "Subscribe",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/api_pbSubscribeResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of api_pbSubscribeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "description": "tm.event = 'NewBlock' or tm.event = 'Tx'",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/test/block": {
      "get": {
        "summary": "Returns the list of example transactions in block. Available only testnet mode.",
        "operationId": "TestBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbBlockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ApiService"
        ]
      }
    },
    "/transaction/{hash}": {
      "get": {
        "summary": "Returns transaction info.",
        "operationId": "Transaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/transactions": {
      "get": {
        "summary": "Return transactions by query.",
        "operationId": "Transactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "1"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "30"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/unconfirmed_txs": {
      "get": {
        "summary": "Returns unconfirmed transactions.",
        "operationId": "UnconfirmedTxs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbUnconfirmedTxsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "30"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/validators": {
      "get": {
        "summary": "Returns list of active validators.",
        "operationId": "Validators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbValidatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    },
    "/waitlist/{address}": {
      "get": {
        "summary": "Returns the list of address stakes in waitlist.",
        "operationId": "WaitList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_pbWaitListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/api_pbErrorBody",
              "example": {
                "error": {
                  "code": "504",
                  "message": "context deadline exceeded",
                  "data": {
                    "operation": "ABC"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "public_key",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "ApiService"
        ]
      }
    }
  },
  "definitions": {
    "AccountBalance": {
      "type": "object",
      "properties": {
        "coin": {
          "type": "string",
          "format": "uint64"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AccountMultisigData": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "string",
          "format": "uint64"
        },
        "weights": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AppStateAccount": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "balance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountBalance"
          }
        },
        "nonce": {
          "type": "string",
          "format": "uint64"
        },
        "multisig_data": {
          "$ref": "#/definitions/AccountMultisigData"
        }
      }
    },
    "AppStateCandidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "reward_address": {
          "type": "string"
        },
        "owner_address": {
          "type": "string"
        },
        "control_address": {
          "type": "string"
        },
        "total_bip_stake": {
          "type": "string"
        },
        "public_key": {
          "type": "string"
        },
        "commission": {
          "type": "string",
          "format": "uint64"
        },
        "stakes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateCandidateStake"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateCandidateStake"
          }
        },
        "status": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AppStateCandidateStake": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "coin": {
          "type": "string",
          "format": "uint64"
        },
        "value": {
          "type": "string"
        },
        "bip_value": {
          "type": "string"
        }
      }
    },
    "AppStateFrozenFund": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "address": {
          "type": "string"
        },
        "candidate_key": {
          "type": "string"
        },
        "candidate_id": {
          "type": "string",
          "format": "uint64"
        },
        "coin": {
          "type": "string",
          "format": "uint64"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AppStateHaltBlock": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "candidate_key": {
          "type": "string"
        }
      }
    },
    "AppStateValidators": {
      "type": "object",
      "properties": {
        "total_bip_stake": {
          "type": "string"
        },
        "public_key": {
          "type": "string"
        },
        "accum_reward": {
          "type": "string"
        },
        "absent_times": {
          "type": "string"
        }
      }
    },
    "AppStateWaitlist": {
      "type": "object",
      "properties": {
        "candidate_id": {
          "type": "string",
          "format": "uint64"
        },
        "owner": {
          "type": "string"
        },
        "coin": {
          "type": "string",
          "format": "uint64"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "BlockRequestField": {
      "type": "string",
      "enum": [
        "transactions",
        "missed",
        "block_reward",
        "size",
        "proposer",
        "validators",
        "evidence"
      ],
      "default": "transactions"
    },
    "BlockResponseTransaction": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "raw_tx": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "nonce": {
          "type": "string",
          "format": "uint64"
        },
        "gas_price": {
          "type": "string",
          "format": "uint64"
        },
        "type": {
          "type": "string",
          "format": "uint64"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "payload": {
          "type": "string",
          "format": "byte"
        },
        "service_data": {
          "type": "string",
          "format": "byte"
        },
        "gas": {
          "type": "string",
          "format": "uint64"
        },
        "gas_coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "code": {
          "type": "string",
          "format": "uint64"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "CandidatesRequestCandidateStatus": {
      "type": "string",
      "enum": [
        "all",
        "off",
        "on"
      ],
      "default": "all"
    },
    "ConnectionStatusChannel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "send_queue_capacity": {
          "type": "string",
          "format": "int64"
        },
        "send_queue_size": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "recently_sent": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ConnectionStatusMonitor": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "start": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "idle": {
          "type": "string",
          "format": "int64"
        },
        "bytes": {
          "type": "string",
          "format": "int64"
        },
        "samples": {
          "type": "string",
          "format": "int64"
        },
        "inst_rate": {
          "type": "string",
          "format": "int64"
        },
        "cur_rate": {
          "type": "string",
          "format": "int64"
        },
        "avg_rate": {
          "type": "string",
          "format": "int64"
        },
        "peak_rate": {
          "type": "string",
          "format": "int64"
        },
        "bytes_rem": {
          "type": "string",
          "format": "int64"
        },
        "time_rem": {
          "type": "string",
          "format": "int64"
        },
        "progress": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "ConsensusParamsBlock": {
      "type": "object",
      "properties": {
        "max_bytes": {
          "type": "string",
          "format": "int64"
        },
        "max_gas": {
          "type": "string",
          "format": "int64"
        },
        "time_iota_ms": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FrozenResponseFrozen": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "address": {
          "type": "string"
        },
        "candidate_key": {
          "type": "string"
        },
        "coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "GenesisResponseAppState": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string"
        },
        "start_height": {
          "type": "string",
          "format": "uint64"
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateValidators"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateCandidate"
          }
        },
        "coins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenesisResponseAppStateCoin"
          }
        },
        "frozen_funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateFrozenFund"
          }
        },
        "waitlist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateWaitlist"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateAccount"
          }
        },
        "halt_blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppStateHaltBlock"
          }
        },
        "used_checks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "max_gas": {
          "type": "string",
          "format": "uint64"
        },
        "total_slashed": {
          "type": "string"
        }
      }
    },
    "GenesisResponseAppStateCoin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "volume": {
          "type": "string"
        },
        "crr": {
          "type": "string",
          "format": "uint64"
        },
        "reserve": {
          "type": "string"
        },
        "max_supply": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "owner_address": {
          "type": "string"
        }
      }
    },
    "GenesisResponseConsensusParams": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/ConsensusParamsBlock"
        },
        "evidence": {
          "$ref": "#/definitions/GenesisResponseConsensusParamsEvidence"
        },
        "validator": {
          "$ref": "#/definitions/GenesisResponseConsensusParamsValidator"
        }
      }
    },
    "GenesisResponseConsensusParamsEvidence": {
      "type": "object",
      "properties": {
        "max_age_num_blocks": {
          "type": "string",
          "format": "int64"
        },
        "max_age_duration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GenesisResponseConsensusParamsValidator": {
      "type": "object",
      "properties": {
        "pub_key_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NetInfoResponsePeer": {
      "type": "object",
      "properties": {
        "latest_block_height": {
          "type": "integer",
          "format": "uint64",
          "title": "Unknown while client is in fast_syncing mode"
        },
        "node_info": {
          "$ref": "#/definitions/api_pbNodeInfo"
        },
        "is_outbound": {
          "type": "boolean"
        },
        "connection_status": {
          "$ref": "#/definitions/PeerConnectionStatus"
        },
        "remote_ip": {
          "type": "string"
        }
      }
    },
    "NodeInfoOther": {
      "type": "object",
      "properties": {
        "tx_index": {
          "type": "string"
        },
        "rpc_address": {
          "type": "string"
        }
      }
    },
    "NodeInfoProtocolVersion": {
      "type": "object",
      "properties": {
        "p2p": {
          "type": "string",
          "format": "uint64"
        },
        "block": {
          "type": "string",
          "format": "uint64"
        },
        "app": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "PeerConnectionStatus": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "uint64"
        },
        "SendMonitor": {
          "$ref": "#/definitions/ConnectionStatusMonitor"
        },
        "RecvMonitor": {
          "$ref": "#/definitions/ConnectionStatusMonitor"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionStatusChannel"
          }
        }
      }
    },
    "SubscribeResponseEvent": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WaitListResponseWait": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string"
        },
        "coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "api_pbAddressBalance": {
      "type": "object",
      "properties": {
        "coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "value": {
          "type": "string"
        },
        "bip_value": {
          "type": "string",
          "title": "Filled in when request bip_value"
        }
      }
    },
    "api_pbAddressDelegatedBalance": {
      "type": "object",
      "properties": {
        "coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "value": {
          "type": "string"
        },
        "bip_value": {
          "type": "string",
          "title": "Filled in when request bip_value"
        },
        "delegate_bip_value": {
          "type": "string"
        }
      }
    },
    "api_pbAddressResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbAddressBalance"
          }
        },
        "delegated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbAddressDelegatedBalance"
          }
        },
        "total": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbAddressBalance"
          }
        },
        "transaction_count": {
          "type": "string",
          "format": "uint64"
        },
        "bip_value": {
          "type": "string",
          "title": "Filled in when request bip_value"
        }
      }
    },
    "api_pbAddressesResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/api_pbAddressesResponseResult"
          }
        }
      }
    },
    "api_pbAddressesResponseResult": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbAddressBalance"
          }
        },
        "delegated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbAddressDelegatedBalance"
          },
          "title": "Filled in when request delegated"
        },
        "total": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbAddressBalance"
          },
          "title": "Sum of balance and delegated by coins. Filled in when request delegated"
        },
        "transaction_count": {
          "type": "string",
          "format": "uint64"
        },
        "bip_value": {
          "type": "string"
        }
      }
    },
    "api_pbBlockResponse": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "time": {
          "type": "string"
        },
        "transaction_count": {
          "type": "string",
          "format": "uint64"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlockResponseTransaction"
          }
        },
        "block_reward": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "proposer": {
          "type": "string"
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbBlockResponseValidator"
          }
        },
        "evidence": {
          "$ref": "#/definitions/api_pbBlockResponseEvidence"
        },
        "missed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "api_pbBlockResponseEvidence": {
      "type": "object",
      "properties": {
        "evidence": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "api_pbBlockResponseValidator": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string"
        },
        "signed": {
          "type": "boolean"
        }
      }
    },
    "api_pbCandidateResponse": {
      "type": "object",
      "properties": {
        "reward_address": {
          "type": "string",
          "description": "Address where validator’s rewards go to."
        },
        "owner_address": {
          "type": "string",
          "description": "Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction. It also enables the owner to edit the node by sending EditCandidate."
        },
        "control_address": {
          "type": "string",
          "description": "Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction."
        },
        "total_stake": {
          "type": "string",
          "title": "Total stake of a candidate"
        },
        "public_key": {
          "type": "string",
          "title": "Public key of a candidate"
        },
        "commission": {
          "type": "string",
          "format": "uint64",
          "title": "Commission (from 0 to 100) from rewards which delegators will pay to validator"
        },
        "used_slots": {
          "type": "string",
          "format": "uint64",
          "title": "Number of occupied steak slots. Note: filled in when request includes_stakes"
        },
        "uniq_users": {
          "type": "string",
          "format": "uint64",
          "title": "Number of unique wallets in steaks. Note: filled in when request includes_stakes"
        },
        "min_stake": {
          "type": "string",
          "title": "Smallest steak size. Note: filled in when request includes_stakes"
        },
        "stakes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbCandidateResponseStake"
          },
          "title": "List of stakes. Note: filled in when request includes_stakes"
        },
        "status": {
          "type": "string",
          "format": "uint64",
          "title": "Candidate status. Available values: offline = 1, online = 2, validator = 3"
        }
      }
    },
    "api_pbCandidateResponseStake": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "value": {
          "type": "string"
        },
        "bip_value": {
          "type": "string"
        }
      }
    },
    "api_pbCandidatesResponse": {
      "type": "object",
      "properties": {
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbCandidateResponse"
          }
        }
      }
    },
    "api_pbCoin": {
      "type": "object",
      "example": {
        "id": "0",
        "symbol": "BIP"
      },
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "api_pbCoinInfoResponse": {
      "type": "object",
      "example": {
        "id": "0",
        "name": "",
        "symbol": "BIP",
        "volume": "0",
        "crr": "0",
        "reserve_balance": "0",
        "max_supply": "10000000000000000000000000000",
        "owner_address": null
      },
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "volume": {
          "type": "string"
        },
        "crr": {
          "type": "string",
          "format": "uint64"
        },
        "reserve_balance": {
          "type": "string"
        },
        "max_supply": {
          "type": "string"
        },
        "owner_address": {
          "type": "string"
        }
      }
    },
    "api_pbErrorBody": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorBodyError"
        }
      }
    },
    "api_pbEstimateCoinBuyResponse": {
      "type": "object",
      "properties": {
        "will_pay": {
          "type": "string"
        },
        "commission": {
          "type": "string"
        }
      }
    },
    "api_pbEstimateCoinSellAllResponse": {
      "type": "object",
      "properties": {
        "will_get": {
          "type": "string"
        }
      }
    },
    "api_pbEstimateCoinSellResponse": {
      "type": "object",
      "properties": {
        "will_get": {
          "type": "string"
        },
        "commission": {
          "type": "string"
        }
      }
    },
    "api_pbEstimateTxCommissionResponse": {
      "type": "object",
      "properties": {
        "commission": {
          "type": "string"
        }
      }
    },
    "api_pbEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "api_pbFrozenResponse": {
      "type": "object",
      "properties": {
        "frozen": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FrozenResponseFrozen"
          }
        }
      }
    },
    "api_pbGenesisResponse": {
      "type": "object",
      "properties": {
        "genesis_time": {
          "type": "string"
        },
        "chain_id": {
          "type": "string"
        },
        "consensus_params": {
          "$ref": "#/definitions/GenesisResponseConsensusParams"
        },
        "app_hash": {
          "type": "string"
        },
        "app_state": {
          "$ref": "#/definitions/GenesisResponseAppState"
        }
      }
    },
    "api_pbHaltsResponse": {
      "type": "object",
      "properties": {
        "public_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "api_pbMaxGasPriceResponse": {
      "type": "object",
      "properties": {
        "max_gas_price": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "api_pbMinGasPriceResponse": {
      "type": "object",
      "properties": {
        "min_gas_price": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "api_pbMissedBlocksResponse": {
      "type": "object",
      "properties": {
        "missed_blocks": {
          "type": "string"
        },
        "missed_blocks_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "api_pbNetInfoResponse": {
      "type": "object",
      "properties": {
        "listening": {
          "type": "boolean"
        },
        "listeners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "count_peers": {
          "type": "string",
          "format": "int64"
        },
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetInfoResponsePeer"
          }
        }
      }
    },
    "api_pbNodeInfo": {
      "type": "object",
      "properties": {
        "protocol_version": {
          "$ref": "#/definitions/NodeInfoProtocolVersion"
        },
        "id": {
          "type": "string"
        },
        "listen_addr": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "channels": {
          "type": "string"
        },
        "moniker": {
          "type": "string"
        },
        "other": {
          "$ref": "#/definitions/NodeInfoOther"
        }
      }
    },
    "api_pbSendTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string"
        }
      }
    },
    "api_pbSendTransactionResponse": {
      "type": "object",
      "example": {
        "code": "0",
        "log": "",
        "hash": "Mt6019f740983dc43b53ea9c37891af0c9ce7251399ebaafc4ea56d68d665adfcb"
      },
      "properties": {
        "code": {
          "type": "string",
          "format": "uint64"
        },
        "log": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        }
      }
    },
    "api_pbStatusResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "latest_block_hash": {
          "type": "string"
        },
        "latest_app_hash": {
          "type": "string"
        },
        "latest_block_height": {
          "type": "string",
          "format": "uint64"
        },
        "latest_block_time": {
          "type": "string"
        },
        "keep_last_states": {
          "type": "string",
          "format": "uint64"
        },
        "total_slashed": {
          "type": "string"
        },
        "catching_up": {
          "type": "boolean"
        },
        "public_key": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        }
      }
    },
    "api_pbSubscribeResponse": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscribeResponseEvent"
          }
        }
      }
    },
    "api_pbTransactionResponse": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "raw_tx": {
          "type": "string"
        },
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "index": {
          "type": "string",
          "format": "uint64"
        },
        "from": {
          "type": "string"
        },
        "nonce": {
          "type": "string",
          "format": "uint64"
        },
        "gas": {
          "type": "string",
          "format": "uint64"
        },
        "gas_price": {
          "type": "string",
          "format": "uint64"
        },
        "gas_coin": {
          "$ref": "#/definitions/api_pbCoin"
        },
        "type": {
          "type": "string",
          "format": "uint64"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "payload": {
          "type": "string",
          "format": "byte"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "code": {
          "type": "string",
          "format": "uint64"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "api_pbTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbTransactionResponse"
          }
        }
      }
    },
    "api_pbUnconfirmedTxsResponse": {
      "type": "object",
      "properties": {
        "transaction_count": {
          "type": "string",
          "format": "uint64"
        },
        "total_transactions": {
          "type": "string",
          "format": "uint64"
        },
        "total_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "api_pbValidatorsResponse": {
      "type": "object",
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_pbValidatorsResponseResult"
          }
        }
      }
    },
    "api_pbValidatorsResponseResult": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string"
        },
        "voting_power": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "api_pbWaitListResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WaitListResponseWait"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  },
  "externalDocs": {
    "description": "More about Minter blockchain",
    "url": "https://www.minter.network/docs"
  }
}
